type Order {
  id: UUID!
  date: Date!
  status: StatusType!
  user: User
  bookings: [Booking!]!
}

type Booking {
  id: UUID
  startDate: Date
  endDate: Date
  price: Int
  product: ProductBooking
  productInfos: ProductBookingInfos
}

# INPUTS : Valeurs utilisées en arguments des mutations ou query

input BookingInput {
  shopId: UUID
  startDate: Date
  endDate: Date
  productId: UUID
  price: Int
}

# input ProductId {
#   id: UUID
# }

input OrderInput {
  userId: UUID
  bookings: [BookingInput]
}

# MUTATIONS

type Query {
  getOrderById(orderId: UUID): Order!
  getOrderByUserId(userId: UUID): [Order!]!
}

type Mutation {
  addOrder(orderInfos: OrderInput!): Order
}

# ENUM : Déclaré dans graphql directement et utilisé dans l'entité USER

enum StatusType {
  INPROGRESS
  CANCEL
  DONE
}
