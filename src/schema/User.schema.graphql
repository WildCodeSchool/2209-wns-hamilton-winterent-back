# TYPES : valeurs attentues en retour des query et mutations

type User {
  id: UUID!
  email: EmailAddress
  firstname: String!
  lastname: String!
  # password: String!
  gender: GenderType
  birthdate: Date
  phoneNumber: PhoneNumber
  role: Role
  address: Address
}

type UpdateUserType {
  id: UUID!
  firstname: String!
  lastname: String!
  gender: GenderType
  birthdate: Date
  phoneNumber: PhoneNumber
  address: Address
}

type UserMinimal {
  id: UUID!
  firstname: String!
  email: EmailAddress!
}

type UserInfos {
  user: UserMinimal
  token: String
}

type Logout {
  success: Boolean
}

type Role {
  id: UUID!
  role: RoleType!
}

# ENUM : Déclaré dans graphql directement et utilisé dans l'entité USER

enum GenderType {
  MAN
  WOMAN
  OTHER
}

enum RoleType {
  SUPERADMIN
  ADMIN
  USER
}

# INPUTS : Valeurs utilisées en arguments des mutations ou query

input CreateUser {
  email: EmailAddress!
  firstname: String!
  lastname: String!
  password: String!
  gender: GenderType
  role: RoleType
  phoneNumber: PhoneNumber
  birthdate: Date
}

input UpdateUserInput {
  id: UUID!
  firstname: String!
  lastname: String!
  gender: GenderType
  birthdate: Date
  phoneNumber: PhoneNumber
  address: AddressUpdateInput
}

input LoginUser {
  email: EmailAddress!
  password: String!
}

# QUERY

type Query {
  users: [User!]!
  user(id: UUID!): User
  login(user: LoginUser!): UserInfos!
  logout: Logout #ajout d'une fonction query qui renverra la clé success à true si tout s'est bien passé
}

# MUTATIONS

type Mutation {
  addUser(user: CreateUser!): UserInfos!
  addUserAddress(id: UUID!, address: CreateAddress!): Address
  updateUser(user: UpdateUserInput!): UpdateUserType!
}
